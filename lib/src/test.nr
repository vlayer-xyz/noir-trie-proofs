use crate::{TrieProof, MAX_TRIE_NODE_LENGTH};

// Test data for { blockNumber: 4605172n, address: '0xc7af99fe5513eb6710e6d5f44f9989da40f27f26', storageKeys: ['0x0000000000000000000000000000000000000000000000000000000000000000'] }
global key = [0; 32];
global proof = [

];
global depth = 0x02;
global value = [
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0x52, 0xc7, 0x57, 0x64, 0xd6, 0xf5, 0x94, 0x73, 0x5d, 0xc7, 0x35, 0xbe, 0x7f, 0x18, 0x30, 0xcd, 0xf5, 0x8d, 0xdf
];
global storage_root = [
    125, 195, 164, 218, 176, 85, 143, 71, 255, 31, 212, 187, 163, 127, 253, 114, 116, 63, 178, 142, 180, 220, 161, 96, 6, 227, 190, 95, 53, 18, 223, 84
];

#[test]
fn test_verify_storage_root_depth_2()
{
    let trie_proof = TrieProof { key, proof, depth, value };
    let _ = trie_proof.verify_storage_root(storage_root);
}

#[test(should_fail_with="Internal node hash does not match the hash extracted from the preceding node")]
fn test_assertion_message_for_invalid_storage_root()
{
    let invalid_storage_root = [0; 32];

    let trie_proof = TrieProof { key, proof, depth, value };
    let _ = trie_proof.verify_storage_root(invalid_storage_root);
}

#[test(should_fail_with="Leaf node hash does not match the hash extracted from the preceding node")]
fn test_assertion_message_for_invalid_leaf()
{
    let mut proof_with_modified_teminal_node = proof;
    proof_with_modified_teminal_node[MAX_TRIE_NODE_LENGTH] += 0x01;

    let trie_proof = TrieProof { key, proof: proof_with_modified_teminal_node, depth, value };
    let _ = trie_proof.verify_storage_root(storage_root);
}
